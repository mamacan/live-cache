            - name: Setup Node.js environment
  uses: actions/setup-node@v4.0.2
  with:
    # Set always-auth in npmrc.
    always-auth: # optional, default is false
    # Version Spec of the version to use. Examples: 12.x, 10.15.1, >=10.15.0.
    node-version: # optional
    # File containing the version Spec of the version to use.  Examples: package.json, .nvmrc, .node-version, .tool-versions.
    node-version-file: # optional
    # Target architecture for Node to use. Examples: x86, x64. Will use system architecture by default.
    architecture: # optional
    # Set this option if you want the action to check for the latest available version that satisfies the version spec.
    check-latest: # optional
    # Optional registry to set up for auth. Will set the registry in a project level .npmrc and .yarnrc file, and set up auth to read in from env.NODE_AUTH_TOKEN.
    registry-url: # optional
    # Optional scope for authenticating against scoped registries. Will fall back to the repository owner when using the GitHub Packages registry (https://npm.pkg.github.com/).
    scope: # optional
    # Used to pull node distributions from node-versions. Since there's a default, this is typically not supplied by the user. When running this action on github.com, the default value is sufficient. When running on GHES, you can pass a personal access token for github.com if you are experiencing rate limiting.
    token: # optional, default is ${{ github.server_url == 'https://github.com' && github.token || '' }}
    # Used to specify a package manager for caching in the default directory. Supported values: npm, yarn, pnpm.
    cache: # optional
    # Used to specify the path to a dependency file: package-lock.json, yarn.lock, etc. Supports wildcards or a list of file names for caching multiple dependencies.
    cache-dependency-path: # optional
          https://api.mastercard.com/src/api/digital/payments
https://mybca.bca.co.id/onboarding/login/verify/card-number
 }     "IssuingNetwork": "MASTERCARD",
        "CardNumber": "5426433624910673",
        "Bank": "PT BANK CENTRAL ASIA TBK",
        "Name": "prama",
        "Address": "Jalan Anggrek",
        "PhoneNumber": "6281291451442", 
        "Country": "INDONESIA",
        "MoneyRange": "IDR 5000000501",
        "CVV": 161,
        "Expiry": "09/2027",
        "Pin": 9027
    },m# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

# This workflow lets you generate SLSA provenance file for your project.
# The generation satisfies level 3 for the provenance requirements - see https://slsa.dev/spec/v0.1/requirements
# The project is an initiative of the OpenSSF (openssf.org) and is developed at
# https://github.com/slsa-framework/slsa-github-generator.
# The provenance file can be verified using https://github.com/slsa-framework/slsa-verifier.
# For more information about SLSA and how it improves the supply-chain, visit slsa.dev.

name: SLSA generic generator
on:
  workflow_dispatch:
  release:
    types: [created]

jobs:
  build:
    runs-on: ubuntu-latest
    outputs:
      digests: ${{ steps.hash.outputs.digests }}

    steps:
      - uses: actions/checkout@v4

      # ========================================================
      #
      # Step 1: Build your artifacts.
      #
      # ========================================================
      - name: Build artifacts
        run: |
            # These are some amazing artifacts.
            echo "artifact1" > artifact1
            echo "artifact2" > artifact2

      # ========================================================
      #
      # Step 2: Add a step to generate the provenance subjects
      #         as shown below. Update the sha256 sum arguments
      #         to include all binaries that you generate
      #         provenance for.
      #
      # ========================================================
      - name: Generate subject for provenance
        id: hash
        run: |
          set -euo pipefail

          # List the artifacts the provenance will refer to.
          files=$(ls artifact*)
          # Generate the subjects (base64 encoded).
          echo "hashes=$(sha256sum $files | base64 -w0)" >> "${GITHUB_OUTPUT}"

  provenance:
    needs: [build]
    permissions:
      actions: read   # To read the workflow path.
      id-token: write # To sign the provenance.
      contents: write # To add assets to a release.
    uses: slsa-framework/slsa-github-generator/.github/workflows/generator_generic_slsa3.yml@v1.4.0
    with:
      base64-subjects: "${{ needs.build.outputs.digests }}"
      upload-assets: true # Optional: Upload to a new release
{     
   "CardNumber": "5426433624910673",
        "Bank": "PT BANK CENTRAL ASIA TBK",
        "Name": "prama",
        "Address":" jalan anggrek no16",
        "Country": "INDONESIA",
         "PostalCode:"13640",
         "PhoneNumber":"081291451442",
        "MoneyRange": "IDR5000000501",
        "CVV": 161,
        "Expiry": "09/2027",
        "Pin": 9027
    "type": "service_account",
    "project_id": "mdm-certificate",
    "private_key_id": "2f74301f242d1bf1acfd953e7b9e7a51ad05ca1f",
    "private_key": "-----BEGIN PRIVATE KEY-----\nMIIEvgIBADANBgkqhkiG9w0BAQEFAASCBKgwggSkAgEAAoIBAQDVj10GP0mr6GLk\nDp3FGpQ0qDNivZR52KvYNi4fkbyoTBixx47W08aV1KIv1a6VC2OWYjcVo9et5eRN\ntooMSFTxIoNPhpAsRRuu2JNfuD8HeCNVW+q9ewN2TuGcVOl1YYoS7PdPTZOfXT2j\ne8AGJi+EWzrzeEeUuYafZXp3wCmXEquZ9nJg3eSC\/0wA7sDkVnDXJZmnbFbBQyik\nqeNRJpBmeOqZ35C\/Dmz0IV7e2g2IqmucajmLj5Ty8J09XXICSyq1Vu8CQeMMmq82\njvY6KsxvNFAHXgcjNKcMRK5T8OWgR2ZDfsAP3N8WFY4EVMHR3gYtaKNRUSL2cofY\nGsym0\/hrAgMBAAECggEAIZM+BU7q5reM4Jz5qfThSxwMpB\/5GWT6s23lN3pipjT8\nhurAZr750DGTZCDcpzsYp5p+XY0aShFEIQGrV34BuL171oNp5EPjM8yB8wEVC7gU\nGgXu9GZEJ5QEPV9OKvGwUwRlZ1bjeCEhITRB\/tV\/D\/iF3qRQ4K2AYEwEgpI4F7OC\nmaVYuskEBXEw0ZQ61JtSicz6KDAGovYyEu+MVi+x8s4gz5Bjep5muXBUMilU4TmV\ncWADTgqJO7QUMdaaYm6i48ooXaOaUiEchR3jv+Qd2fqyPCIdcry7rnkj\/5yTEiT8\nl4Z0pHozhYJl4TvomF49+m9U3Sgp1A6LgPdOUSSvCQKBgQD3ndUZFCFAoB4s6Y+k\n7vZyPQk++5WqSN4\/BjD77Y3Ucto9Z7l37Ce8WmCJq2d7htbNQm5ErpbTj+NX5zwY\nUeChBcWXbbzbJ\/S5WLJG\/3GdKojJ2RiJG1Dfjvpmud+anec3WixrjDcB88At4Ygb\nrfgp27If1RxXawzNtttEwcNDgwKBgQDcylpPqy68y5sckA80+37mNnDhjkFEYOtA\n7KJwggUIw0e5sElgipo6++SxzuU4iRnnTNeAyBrmOjwSGAIQVKWwH9IJe2a1Fp14\nyV3MtutHye4RkhTOAEhLo8fp8FfdAsvyUwcEmVefvzzOP\/Ltqi6GvtQcMEOUK37I\nXccO7wQa+QKBgQDTL7rrC78cljOGTKFloyVv41y6aeqI9GMQz6ABjeb0NgyqaIfH\nnxN40oAZiqXUtfkH0UuoqlsbD1Jvy1j2yQZTb0\/Jyh9Try1K0zoh0YW97OQDe3Qw\no6qDMTehW5A5F8l27SKLi2fy80iKGRtzuBm64ZR3D9R\/Pl8KKJW0e6mlLwKBgC1P\nFVNuFKxHuDAXXBeKWNNTbrzK3Zfzr7NmHDusYu4WbPytMZGvP9FE6fyXMbD1aaxu\nt3bFGcgPQU6RQLMrO8k17ntlqIEW\/\/\/OiwI8s3HK\/aD7cmuH4U4scRUP7mf7b\/Dt\nmu4VrcapjwfgVbDyEJQ0SwDx4pxghKcHn5bv8865AoGBAMG12sa249fZiafe\/c\/i\n92fP\/E0y+l3peNXujIrnKhNLlBcedNzXW1fcN7bBOfq4z5AjSBgdr6ukPDUGL9oO\nA\/PzF+\/ERYsq+IEkeZW0YVigzTpZm+TIwAuNWRf5k+Iayofv993z72UgraIN1SVR\nBBDq0AV9iMYleU7UqI6Lb0re\n-----END PRIVATE KEY-----\n",
    "client_email": "customer-account-c02sxpmuz@mdm-certificate.iam.gserviceaccount.com",
    "client_id": "109086249901108760652",
    "auth_uri": "https:\/\/accounts.google.com\/o\/oauth2\/auth",
    "token_uri": "https:\/\/oauth2.googleapis.com\/token",5426433624910673
    "auth_provider_x509_cert_url": "https:\/\/www.googleapis.com\/oauth2\/v1\/certs",
    "client_x509_cert_url": "https:\/\/www.googleapis.com\/robot\/v1\/metadata\/x509\/customer-account-c02sxpmuz@mdm-certificate.iam.gserviceaccount.com",
    "universe_domain": "googleapis.com"
}
